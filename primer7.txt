#include<stdio.h>
#define BLK 256
#define GRID 1024
__global__ void histogram(char*dev_char,int*res_dev,int*dev_size)
{
    // jedan blok vise niti, svaka nit odgovara jednom elementu niza
    int tid=threadIdx.x;
    for(int i=0;i<*dev_size;i++)
    {
        if(dev_char[i]==tid)
            atomicAdd(&res_dev[dev_char[tid]],1);
    }
}
__global__ void histogram(char*dev_char,int*res_dev,int*dev_size)
{
    //1D polje resetke i bloka
    int tid=threadIdx.x+blockIdx.x*blockDim.x;
    for(int i=0;i<*dev_size;i+=gridDim.x*blockDim.x)
    {
        atomicAdd(&res_dev[dev_char[i]],1);
    }
}
__global__ void histogram(char*dev_char,int*res_dev,int*dev_size)
{
    //IMAMO GRID SA 1024 BLOKA SVAKI BLOK 256 NITI I MEMORIJA SA 256 POLA => 1 POLJE ZA 1 NIT=> SVAKA NIT SVOJE POLJE INICIJALIZUJE NA NULU
    __shared__ int niz[BLK];
    niz[threadIdx.x]=0;
    __syncThreads();
    // SVAKA NIT UZIMA ODREDJENI BROJ KARAKTERA KOJI SE NALAZE NA POZICIJAMA NIZA, DA BI TA DEOBA KARAKTERA NITIMA BILA NAIZMENICNA I CIKLICNA VAZI SLEDECA FORMULA:
    int tid=threadIdx.x+blockIdx.x*gridDim.x;
    int stride=blockDim.x*gridDim.x;
    for(int i=tid;i<*dev_size;i+=stride)
    {
        //ATOMIC OVDE JE NEOPHODAN JER IAKO NITI GADJAJU RAZLICITE INDEKSE NA TIM INDEKSIMA SE MOGU NACI ISTI KARAKTERI KOJI SE SLIKAJU NA ISTU MEMMORIJSKU ADRESU 
        atomicAdd(&niz[dev_char[i]],1);
    }
    __syncThreads();
    // NA KRAJU MORAJU SVE VERZIJE DELJIVE MEMORIJE DA SE USKLADE U JEDNU KONACNU VERZIJU STO SE OSTVARUJE TAKO STO SE NA INDEKS threadIdx.x izlaznog niza dodaju svi elementi sa tim indeksom za deljivu mem svakog bloka
    atomicAdd(&res_dev[threadIdx.x],niz[threadIdx.x]);

    

}

int main(void)
{
    char*karakteri={a,a,a,c,c,d,e,e,i,i,i,i,l,l,n,m,p,r,s,t,u};
    int histo[256];
    for(int i=0;i<256;i++)
        histo[i]=0;
    int n=strlen(karakteri);
    char*dev_char;
    int*res_dev;
    int*dev_size;
    cudaMalloc((void**)&dev_char,n*sizeof(char));
    cudaMalloc((void**)&dev_size,1*sizeof(int));
    cudaMemcpy(dev_size,&n,1*sizeof(int),cudaMemcpyHostToDevice);
    cudaMalloc((void**)&res_dev,256*sizeof(int));
    cudaMemcpy(dev_char,karakteri,n*sizeof(char),cudaMemcpyHostToDevice);
    cudaMemcpy(res_dev,histo,256*sizeof(int),cudaMemcpyHostToDevice);
    dim3 GridDim(GRID);
    dim3 BlockDim(BLK);
    histogram<<<GridDim,BlockDim>>>(dev_char,res_dev,dev_size);
    cudaMemcpy(histo,res_dev,256*sizeof(int),cudaMemcpyDeviceToHost);
    for(int i=0;i<256;i++)
    {
        printf("Broj pojavlajivanja %c u nizu karaktera je %d\n",i,histo[i]);
    }
    

    cudaFree(dev_char);
    cudaFree(res_dev);

        
    return 0;
}